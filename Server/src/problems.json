[
  {
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.",
    "difficulty": "Easy",
    "tags": ["Array", "Hash Table"],
    "company": ["Amazon", "Google", "Meta"],
    "lists": ["Neetcode", "Blind75"],
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "input": "nums = [3,2,4], target = 6",
        "output": "[1,2]"
      },
      {
        "input": "nums = [3,3], target = 6",
        "output": "[0,1]"
      }
    ],
    "testCases": [
      {
        "input": { "nums": [2, 7, 11, 15], "target": 9 },
        "output": [0, 1]
      },
      {
        "input": { 
          "nums": [3, 2, 4], 
          "target": 6 
        },
        "output": [1, 2]
      },
      {
        "input": { "nums": [3, 3], "target": 6 },
        "output": [0, 1]
      },
      {
        "input": { "nums": [1, 3, 7, 9, 2], "target": 10 },
        "output": [0, 3]
      }
    ]
  },

  {
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string, find the length of the longest substring without repeating characters.",
    "difficulty": "Medium",
    "tags": ["String", "Sliding Window"],
    "company": ["Amazon", "Google", "Apple"],
    "lists": ["Neetcode", "Blind75", "Striver's 79"],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The answer is \"abc\", with the length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The answer is \"b\", with the length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The answer is \"wke\", with the length of 3. Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."
      }
    ],
    "testCases": [
      {
        "input": { "s": "abcabcbb" },
        "output": 3
      },
      {
        "input": { "s": "bbbbb" },
        "output": 1
      },
      {
        "input": { "s": "pwwkew" },
        "output": 3
      },
      {
        "input": { "s": "abcdef" },
        "output": 6
      }
    ]
  },

  {
    "title": "Merge Intervals",
    "description": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "difficulty": "Medium",
    "tags": ["Array", "Sorting"],
    "company": ["Google", "Microsoft", "Meta"],
    "lists": ["Blind75", "Neetcode"],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "Since intervals [1,3] and [2,6] overlap, merge them into [1,6]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "Intervals [1,4] and [4,5] are considered overlapping."
      }
    ],
    "testCases": [
      {
        "input": {
          "intervals": [
            [1, 3],
            [2, 6],
            [8, 10],
            [15, 18]
          ]
        },
        "output": [
          [1, 6],
          [8, 10],
          [15, 18]
        ]
      },
      {
        "input": {
          "intervals": [
            [1, 4],
            [4, 5]
          ]
        },
        "output": [[1, 5]]
      },
      {
        "input": {
          "intervals": [
            [1, 4],
            [2, 3]
          ]
        },
        "output": [[1, 4]]
      },
      {
        "input": {
          "intervals": [
            [5, 10],
            [15, 20],
            [10, 15]
          ]
        },
        "output": [[5, 20]]
      }
    ]
  },

  {
    "title": "Product Of Array Except Self",
    "description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\n\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\n\nYou must write an algorithm that runs in O(n) time and without using the division operation.",
    "difficulty": "Medium",
    "tags": ["Array", "Prefix Sum"],
    "company": ["Amazon", "Google"],
    "lists": ["Blind75", "Neetcode"],
    "examples": [
      {
        "input": "nums = [1,2,3,4]",
        "output": "[24,12,8,6]"
      },
      {
        "input": "nums = [-1,1,0,-3,3]",
        "output": "[0,0,9,0,0]"
      }
    ],
    "testCases": [
      {
        "input": { "nums": [1, 2, 3, 4] },
        "output": [24, 12, 8, 6]
      },
      {
        "input": { "nums": [-1, 1, 0, -3, 3] },
        "output": [0, 0, 9, 0, 0]
      },
      {
        "input": { "nums": [5, 4, 3, 2, 1] },
        "output": [24, 30, 40, 60, 120]
      },
      {
        "input": { "nums": [2, 2, 3, 4] },
        "output": [24, 24, 16, 12]
      }
    ]
  },

  {
    "title": "Find Median From Data Stream",
    "description": "The data stream is continuously updated. You need to find the median efficiently.",
    "difficulty": "Hard",
    "tags": ["Heap", "Design"],
    "company": ["Google", "Netflix", "Microsoft"],
    "lists": ["Striver's 79"],
    "examples": [
      {
        "input": "[1, 2, 3]",
        "output": "2.0",
        "explanation": "The median is 2."
      },
      {
        "input": "[1, 2]",
        "output": "1.5",
        "explanation": "The median is (1 + 2) / 2 = 1.5."
      }
    ],
    "testCases": [
      {
        "input": { "stream": [1, 2, 3] },
        "output": 2.0
      },
      {
        "input": { "stream": [1, 2] },
        "output": 1.5
      },
      {
        "input": { "stream": [5, 2, 8, 10] },
        "output": 6.5
      },
      {
        "input": { "stream": [3, 7, 1, 9, 5] },
        "output": 5
      }
    ]
  },

  {
    "title": "Longest Palindromic Substring",
    "description": "Given a string, find the longest palindromic substring.",
    "difficulty": "Medium",
    "tags": ["String", "Dynamic Programming"],
    "company": ["Amazon", "Google", "Apple"],
    "lists": ["Neetcode"],
    "examples": [
      {
        "input": "babad",
        "output": "bab or aba",
        "explanation": "Both 'bab' and 'aba' are valid answers."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "'bb' is the longest palindromic substring."
      }
    ],
    "testCases": [
      {
        "input": { "s": "babad" },
        "output": "bab"
      },
      {
        "input": { "s": "cbbd" },
        "output": "bb"
      },
      {
        "input": { "s": "abcd" },
        "output": "a"
      },
      {
        "input": { "s": "abccba" },
        "output": "abccba"
      }
    ]
  },

  {
    "title": "Clone Graph",
    "description": "Given a reference of a node in a connected graph, return a deep copy of the graph.",
    "difficulty": "Medium",
    "tags": ["Graph", "Depth-first Search"],
    "company": ["Amazon", "Google", "Meta"],
    "lists": ["Neetcode", "Striver's 79"],
    "examples": [
      {
        "input": "adjList = [[2,4],[1,3],[2,4],[1,3]]",
        "output": "[[2,4],[1,3],[2,4],[1,3]]",
        "explanation": "The graph is cloned correctly."
      },
      {
        "input": "adjList = [[]]",
        "output": "[[]]",
        "explanation": "An empty graph is cloned correctly."
      }
    ],
    "testCases": [
      {
        "input": {
          "adjList": [
            [2, 4],
            [1, 3],
            [2, 4],
            [1, 3]
          ]
        },
        "output": [
          [2, 4],
          [1, 3],
          [2, 4],
          [1, 3]
        ]
      },
      {
        "input": { "adjList": [[]] },
        "output": [[]]
      },
      {
        "input": { "adjList": [[2], [3], [4], []] },
        "output": [[2], [3], [4], []]
      }
    ]
  },

  {
    "title": "Binary Tree Maximum Path Sum",
    "description": "Given a non-empty binary tree, find the maximum path sum.",
    "difficulty": "Hard",
    "tags": ["Tree", "Dynamic Programming"],
    "company": ["Meta", "Microsoft", "Netflix"],
    "lists": ["Blind75"],
    "examples": [
      {
        "input": "[1,2,3]",
        "output": "6",
        "explanation": "The maximum path sum is 1 + 2 + 3 = 6."
      },
      {
        "input": "[1,-2,3]",
        "output": "4",
        "explanation": "The maximum path sum is 1 + 3 = 4."
      }
    ],
    "testCases": [
      {
        "input": { "tree": [1, 2, 3] },
        "output": 6
      },
      {
        "input": { "tree": [1, -2, 3] },
        "output": 4
      },
      {
        "input": { "tree": [-10, 9, 20, null, null, 15, 7] },
        "output": 42
      },
      {
        "input": { "tree": [-3] },
        "output": -3
      }
    ]
  },

  {
    "title": "Kth Largest Element in an Array",
    "description": "Find the kth largest element in an unsorted array.",
    "difficulty": "Medium",
    "tags": ["Heap", "Quickselect"],
    "company": ["Amazon", "Microsoft"],
    "lists": ["Neetcode", "Blind75"],
    "examples": [
      {
        "input": "[3,2,1,5,6,4], k = 2",
        "output": "5",
        "explanation": "The 2nd largest element is 5."
      },
      {
        "input": "[3,2,3,1,2,4,5,5,6], k = 4",
        "output": "4",
        "explanation": "The 4th largest element is 4."
      }
    ],
    "testCases": [
      {
        "input": { "nums": [3, 2, 1, 5, 6, 4], "k": 2 },
        "output": 5
      },
      {
        "input": { "nums": [3, 2, 3, 1, 2, 4, 5, 5, 6], "k": 4 },
        "output": 4
      },
      {
        "input": { "nums": [7, 10, 4, 3, 20, 15], "k": 3 },
        "output": 10
      },
      {
        "input": { "nums": [1], "k": 1 },
        "output": 1
      }
    ]
  },

  {
    "title": "Word Search",
    "description": "Given a 2D board and a word, check if the word exists in the grid by traversing adjacent cells.",
    "difficulty": "Medium",
    "tags": ["Backtracking", "Matrix"],
    "company": ["Apple", "Microsoft", "Meta"],
    "lists": ["Striver's 79"],
    "examples": [
      {
        "input": "[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word = 'ABCCED'",
        "output": "true",
        "explanation": "The word can be found in the grid."
      },
      {
        "input": "[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word = 'SEE'",
        "output": "true",
        "explanation": "The word can be found in the grid."
      },
      {
        "input": "[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word = 'ABCB'",
        "output": "false",
        "explanation": "The word cannot be found in the grid."
      }
    ],
    "testCases": [
      {
        "input": {
          "board": [
            ["A", "B", "C", "E"],
            ["S", "F", "C", "S"],
            ["A", "D", "E", "E"]
          ],
          "word": "ABCCED"
        },
        "output": true
      },
      {
        "input": {
          "board": [
            ["A", "B", "C", "E"],
            ["S", "F", "C", "S"],
            ["A", "D", "E", "E"]
          ],
          "word": "SEE"
        },
        "output": true
      },
      {
        "input": {
          "board": [
            ["A", "B", "C", "E"],
            ["S", "F", "C", "S"],
            ["A", "D", "E", "E"]
          ],
          "word": "ABCB"
        },
        "output": false
      }
    ]
  },

  {
    "title": "Lowest Common Ancestor of a Binary Tree",
    "description": "Given a binary tree, find the lowest common ancestor of two given nodes.",
    "difficulty": "Medium",
    "tags": ["Tree", "Recursion"],
    "company": ["Google", "Microsoft", "Amazon"],
    "lists": ["Blind75", "Neetcode"],
    "examples": [
      {
        "input": "[3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "output": "3",
        "explanation": "The lowest common ancestor of nodes 5 and 1 is 3."
      },
      {
        "input": "[3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
        "output": "5",
        "explanation": "The lowest common ancestor of nodes 5 and 4 is 5."
      }
    ],
    "testCases": [
      {
        "input": {
          "tree": [3, 5, 1, 6, 2, 0, 8, null, null, 7, 4],
          "p": 5,
          "q": 1
        },
        "output": 3
      },
      {
        "input": {
          "tree": [3, 5, 1, 6, 2, 0, 8, null, null, 7, 4],
          "p": 5,
          "q": 4
        },
        "output": 5
      }
    ]
  },

  {
    "title": "Reverse Linked List",
    "description": "Reverse a singly linked list.",
    "difficulty": "Easy",
    "tags": ["Linked List"],
    "company": ["Apple", "Amazon", "Google"],
    "lists": ["Blind75", "Neetcode"],
    "examples": [
      {
        "input": "[1,2,3,4,5]",
        "output": "[5,4,3,2,1]",
        "explanation": "The linked list is reversed."
      },
      {
        "input": "[1,2]",
        "output": "[2,1]",
        "explanation": "The linked list is reversed."
      }
    ],
    "testCases": [
      {
        "input": { "list": [1, 2, 3, 4, 5] },
        "output": [5, 4, 3, 2, 1]
      },
      {
        "input": { "list": [1, 2] },
        "output": [2, 1]
      }
    ]
  },

  {
    "title": "Number of Islands",
    "description": "Given a 2D grid of '1's (land) and '0's (water), count the number of islands.",
    "difficulty": "Medium",
    "tags": ["Graph", "Depth-first Search"],
    "company": ["Amazon", "Meta"],
    "lists": ["Neetcode", "Blind75"],
    "examples": [
      {
        "input": "[['1','1','1','1','0'],['1','1','0','1','0'],['0','0','1','0','0'],['0','0','0','0','0']]",
        "output": "1",
        "explanation": "There is one island."
      },
      {
        "input": "[['1','1','0','0','0'],['1','0','0','1','1'],['0','0','1','0','0']]",
        "output": "3",
        "explanation": "There are three islands."
      }
    ],
    "testCases": [
      {
        "input": {
          "grid": [
            ["1", "1", "1", "1", "0"],
            ["1", "1", "0", "1", "0"],
            ["1", "1", "0", "0", "1"]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "grid": [
            ["1", "1", "0", "0", "0"],
            ["1", "1", "0", "0", "0"],
            ["0", "0", "1", "0", "0"],
            ["0", "0", "0", "1", "1"]
          ]
        },
        "output": 3
      }
    ]
  },

  {
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input is valid.",
    "difficulty": "Easy",
    "tags": ["Stack", "String"],
    "company": ["Amazon", "Apple", "Meta"],
    "lists": ["Blind75"],
    "examples": [
      {
        "input": "'()'",
        "output": "true",
        "explanation": "The parentheses are valid."
      },
      {
        "input": "'(]')",
        "output": "false",
        "explanation": "The parentheses are not valid."
      }
    ],
    "testCases": [
      {
        "input": { "s": "()" },
        "output": true
      },
      {
        "input": { "s": "()[]{}" },
        "output": true
      },
      {
        "input": { "s": "(]" },
        "output": false
      },
      {
        "input": { "s": "([)]" },
        "output": false
      },
      {
        "input": { "s": "{[]}" },
        "output": true
      }
    ]
  },

  {
    "title": "Top K Frequent Elements",
    "description": "Given an integer array, return the k most frequent elements.",
    "difficulty": "Medium",
    "tags": ["Hashmap", "Heap"],
    "company": ["Google", "Amazon"],
    "lists": ["Blind75", "Neetcode"],
    "examples": [
      {
        "input": "[1,1,1,2,2,3], k = 2",
        "output": "[1,2]",
        "explanation": "The two most frequent elements are 1 and 2."
      },
      {
        "input": "[1], k = 1",
        "output": "[1]",
        "explanation": "The most frequent element is 1."
      }
    ],
    "testCases": [
      {
        "input": { "nums": [1, 1, 1, 2, 2, 3], "k": 2 },
        "output": [1, 2]
      },
      {
        "input": { "nums": [1], "k": 1 },
        "output": [1]
      },
      {
        "input": { "nums": [1, 2, 3, 4, 5, 5, 5, 4, 4, 4], "k": 2 },
        "output": [4, 5]
      },
      {
        "input": { "nums": [6, 5, 6, 7, 8, 8, 8], "k": 1 },
        "output": [8]
      },
      {
        "input": { "nums": [4, 4, 4, 6, 6, 6, 5, 5, 5, 3, 3, 3], "k": 3 },
        "output": [4, 6, 5]
      }
    ]
  }
]
